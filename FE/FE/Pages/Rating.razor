@page "/rating"
@inject HttpClient Http
@using System.Net.Http.Headers
@*@using Syncfusion.Blazor.DropDowns*@
@using Blazored.LocalStorage
@inject ILocalStorageService localStore
@using Models

<html>
<head>
    <link rel="stylesheet" type="text/css" href="../css/rating1.css">
    <h1>Rating</h1>
</head>
<body>
    <section class="rating-block">
        <div class="container">
            <div class="row">
                <div class="col-md-4 rating-sec">
                    <h2 class="text-center">Rate one of the movies on our site.</h2>
                    <form class="rating-form">
                        <div class="form-group">
                            <label for="exampleInputMovieName" class="text-uppercase">Enter movie Name</label>
                            <input type="text" id="name" class="form-control" placeholder="Movie name">
                        </div>

                        <div class="rate">
                            <input type="radio" id="star5" name="rate" value="5" />
                            <label for="star5" title="text">10 stars</label>
                            <input type="radio" id="star4" name="rate" value="4" />
                            <label for="star4" title="text">9 stars</label>
                            <input type="radio" id="star3" name="rate" value="3" />
                            <label for="star3" title="text">8 stars</label>
                            <input type="radio" id="star2" name="rate" value="2" />
                            <label for="star2" title="text">7 stars</label>
                            <input type="radio" id="star1" name="rate" value="1" />
                            <label for="star1" title="text">6 star</label>
                            <input type="radio" id="star5" name="rate" value="5" />
                            <label for="star5" title="text">5 stars</label>
                            <input type="radio" id="star4" name="rate" value="4" />
                            <label for="star4" title="text">4 stars</label>
                            <input type="radio" id="star3" name="rate" value="3" />
                            <label for="star3" title="text">3 stars</label>
                            <input type="radio" id="star2" name="rate" value="2" />
                            <label for="star2" title="text">2 stars</label>
                            <input type="radio" id="star1" name="rate" value="1" />
                            <label for="star1" title="text">1 star</label>
                        </div>

                        <div class="form-check">

                            <input @*@onclick="@AddRating" *@ type="submit" class="btn btn-rating float-right" value="Send rating" @*disabled=@isSubmitting*@>

                        </div>
                    </form>
                </div>
                <div class="col-md-8 banner-sec">
                    <img src="https://i.ibb.co/x2GnTWj/rating.jpg" alt="First slide">



                </div>
            </div>
            @if (_ratings.Any())
            {
                <div class="rating-list">
                    @foreach (var rating in _ratings)
                    {
                        <div class="rating-el">
                            <div class="card-body">
                                <h5 class="movie-title">@rating.MovieTitle</h5>
                                <p class="rating-info">
                                    <strong>Your Rating: </strong> @rating.Rated
                                </p>
                                <button>Go to movie page</button>
                            </div>
                        </div>
                    }
                </div>
            }

            else if (isLoaded == true)
            {
                <p>No Ratings Found</p>
            }
        </div>
    </section>
</body>
</html>

@code {

    private List<Movie> movies = new List<Movie>();

    private async Task GetMovies() => movies = await Http.GetFromJsonAsync<List<Movie>>("https://localhost:44385/movies");

    List<RatingEntry> _ratings = new List<RatingEntry>();
    private bool isLoaded;
    private Movie chosenMovie;
    private int chosenRating;


    protected override async Task OnInitializedAsync()
    {
        await GetMovies();
        await GetUserRatings();
    }
    private async Task InsertRating()
    {
        string userId = await localStore.GetItemAsync<string>("userId");
        string token = await localStore.GetItemAsync<string>("token");
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        RatingEntry ratingEntry = new RatingEntry
        {
            UserId = userId,
            MovieId = chosenMovie.Id,
            Rated = chosenRating,
            MovieTitle = chosenMovie.Title,
            Votes = chosenMovie.Votes
        };
        var response = await Http.PostAsJsonAsync("https://localhost:44385/users/login", ratingEntry);
    }
    private async Task GetUserRatings()
    {
        isLoaded = false;
        string userId = await localStore.GetItemAsync<string>("userId");
        string token = await localStore.GetItemAsync<string>("token");

        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        _ratings = await Http.GetFromJsonAsync<List<RatingEntry>>("https://localhost:44385/rating/user/" + userId);
        isLoaded = true;
    }
}
